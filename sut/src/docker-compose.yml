services:

  seq:
    container_name: seq_${tjobname}
    image: datalust/seq:latest
    environment:
      - ACCEPT_EULA=Y
    networks:
      - jenkins_network

  sqldata:
    container_name: sqldata_${tjobname}
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - SA_PASSWORD=Pass@word
      - ACCEPT_EULA=Y
    volumes:
      - eshop-sqldata:/var/opt/mssql
    networks:
      - jenkins_network

  nosqldata:
    container_name: nosqldata_${tjobname}
    image: mongo
    volumes:
      - eshop-nosqldata:/data/db
    networks:
      - jenkins_network

  basketdata:
    container_name: basketdata_${tjobname}
    image: redis:alpine
    volumes:
      - eshop-basketdata:/data
    networks:
      - jenkins_network

  rabbitmq:
    container_name: rabbitmq_${tjobname}
    image: rabbitmq:3-management-alpine
    networks:
      - jenkins_network

  identity-api:
    container_name: identity_api_${tjobname}
    image: ${REGISTRY:-eshop}/identity.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Identity/Identity.API/Dockerfile
    depends_on:
      - sqldata


    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportb}
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}/xamarincallback
      - ConnectionStrings__IdentityDb=Server=sqldata_${tjobname},1433;Database=Microsoft.eShopOnContainers.Service.IdentityDb;User Id=sa;Password=Pass@word;Encrypt=False;TrustServerCertificate=true
      - MvcClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${frontend_port}
      - BasketApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportk}
      - OrderingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchporth}
      - MobileShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportg}
      - WebShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportd}
      - WebhooksApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportf}
      - WebhooksWebClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportc}
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "${retorchportj}:80"
    networks:
      - jenkins_network

  basket-api:
    container_name: basket_api_${tjobname}
    image: ${REGISTRY:-eshop}/basket.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
    depends_on:
      - basketdata
      - identity-api
      - rabbitmq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - Kestrel__Endpoints__GRPC__Protocols=Http2
      - ConnectionStrings__Redis=basketdata_${tjobname}
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - Identity__Url=http://identity_api_${tjobname}
      - Identity__ExternalUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - PATH_BASE=/basket_api_${tjobname}
    ports:
      - "${retorchportk}:80"
    networks:
      - jenkins_network

  catalog-api:
    container_name: catalog_api_${tjobname}
    image: ${REGISTRY:-eshop}/catalog.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
    depends_on:
      - sqldata
      - rabbitmq

    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - Kestrel__Endpoints__GRPC__Protocols=Http2
      - ConnectionStrings__CatalogDb=Server=sqldata_${tjobname},1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=sa;Password=Pass@word;Encrypt=False;TrustServerCertificate=true
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - PATH_BASE=/catalog_api_${tjobname}
    networks:
      - jenkins_network

  ordering-api:
    container_name: ordering_api_${tjobname}
    image: ${REGISTRY:-eshop}/ordering.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile
    depends_on:
      - sqldata
      - rabbitmq

    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Kestrel__Endpoints__HTTP__Url=http://0.0.0.0:80
      - Kestrel__Endpoints__GRPC__Url=http://0.0.0.0:81
      - Kestrel__Endpoints__GRPC__Protocols=Http2
      - ConnectionStrings__OrderingDb=Server=sqldata_${tjobname},1433;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word;Encrypt=False;TrustServerCertificate=true
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - Identity__Url=http://identity_api_${tjobname}
      - Identity__ExternalUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - PATH_BASE=/ordering_api_${tjobname}
      - GRPC_PORT=81
      - PORT=80
    ports:
      - "${retorchporth}:80"
      - "${retorchporti}:81"
    networks:
      - jenkins_network

  ordering-backgroundtasks:
    container_name: ordering_backgroundtasks_${tjobname}
    image: ${REGISTRY:-eshop}/ordering.backgroundtasks:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.BackgroundTasks/Dockerfile
    depends_on:
      - sqldata
      - rabbitmq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__OrderingDb=Server=sqldata_${tjobname},1433;Database=Microsoft.eShopOnContainers.Services.OrderingDb;User Id=sa;Password=Pass@word;Encrypt=False;TrustServerCertificate=true
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - GracePeriodTime=1
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    networks:
      - jenkins_network

  payment-api:
    container_name: payment_api_${tjobname}
    image: ${REGISTRY:-eshop}/payment.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Payment/Payment.API/Dockerfile
    depends_on:
      - rabbitmq
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    networks:
      - jenkins_network

  webhooks-api:
    container_name: webhooks_api_${tjobname}
    image: ${REGISTRY:-eshop}/webhooks.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Webhooks/Webhooks.API/Dockerfile
    depends_on:
      - sqldata
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__WebhooksDb=Server=sqldata_${tjobname},1433;Database=Microsoft.eShopOnContainers.Services.WebhooksDb;User Id=sa;Password=Pass@word;Encrypt=False;TrustServerCertificate=true
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - Identity__Url=http://identity_api_${tjobname}
      - Identity__ExternalUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
    ports:
      - "${retorchportf}:80"
    networks:
      - jenkins_network

  mobileshoppingapigw:
    container_name: mobileshoppingapigw_${tjobname}
    image: envoyproxy/envoy:v1.11.1
    volumes:
      - ./tmp/${tjobname}/mobileshopping:/etc/envoy
    networks:
      - jenkins_network

  mobileshoppingagg:
    container_name: mobileshoppingagg_${tjobname}
    image: ${REGISTRY:-eshop}/mobileshoppingagg:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: ApiGateways/Mobile.Bff.Shopping/aggregator/Dockerfile
    depends_on:
      - nosqldata
      - sqldata
      - identity-api
      - rabbitmq
      - ordering-api
      - catalog-api
      - basket-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket_api_${tjobname}
      - urls__catalog=http://catalog_api_${tjobname}
      - urls__orders=http://ordering_api_${tjobname}
      - urls__identity=http://identity_api_${tjobname}
      - urls__grpcBasket=http://basket_api_${tjobname}:81
      - urls__grpcCatalog=http://catalog_api_${tjobname}:81
      - urls__grpcOrdering=http://ordering_api_${tjobname}:81
      - CatalogUrlHC=http://catalog_api_${tjobname}/hc
      - OrderingUrlHC=http://ordering_api_${tjobname}/hc
      - IdentityUrlHC=http://identity_api_${tjobname}/hc
      - BasketUrlHC=http://basket_api_${tjobname}/hc
      - PaymentUrlHC=http://payment_api_${tjobname}/hc
      - Identity__Url=http://identity_api_${tjobname}
      - Identity__ExternalUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
    ports:
      - "${retorchportg}:80"
    networks:
      - jenkins_network

  webshoppingagg:
    container_name: webshoppingagg_${tjobname}
    image: ${REGISTRY:-eshop}/webshoppingagg:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: ApiGateways/Web.Bff.Shopping/aggregator/Dockerfile
    depends_on:
      - nosqldata
      - sqldata
      - identity-api
      - rabbitmq
      - ordering-api
      - catalog-api
      - basket-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - urls__basket=http://basket_api_${tjobname}
      - urls__catalog=http://catalog_api_${tjobname}
      - urls__orders=http://ordering_api_${tjobname}
      - urls__identity=http://identity_api_${tjobname}
      - urls__grpcBasket=http://basket_api_${tjobname}:81
      - urls__grpcCatalog=http://catalog_api_${tjobname}:81
      - urls__grpcOrdering=http://ordering_api_${tjobname}:81
      - ReverseProxy__Clusters__basket__Destinations__destination0__Address=http://basket_api_${tjobname}
      - ReverseProxy__Clusters__catalog__Destinations__destination0__Address=http://catalog_api_${tjobname}
      - ReverseProxy__Clusters__orders__Destinations__destination0__Address=http://ordering_api_${tjobname}
      - ReverseProxy__Clusters__signalr__Destinations__destination0__Address=http://ordering_signalrhub_${tjobname}
      - CatalogUrlHC=http://catalog_api_${tjobname}/hc
      - OrderingUrlHC=http://ordering_api_${tjobname}/hc
      - IdentityUrlHC=http://identity_api_${tjobname}/hc
      - BasketUrlHC=http://basket_api_${tjobname}/hc
      - PaymentUrlHC=http://payment_api_${tjobname}/hc
      - Identity__Url=http://identity_api_${tjobname}
      - Identity__ExternalUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
    ports:
      - "${retorchportd}:80"
    networks:
      - jenkins_network

  ordering-signalrhub:
    container_name: ordering_signalrhub_${tjobname}
    image: ${REGISTRY:-eshop}/ordering.signalrhub:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.SignalrHub/Dockerfile
    depends_on:
      - nosqldata
      - sqldata
      - identity-api
      - rabbitmq
      - ordering-api
      - catalog-api
      - basket-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__EventBus=rabbitmq_${tjobname}
      - EventBus__UserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBus__Password=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureServiceBusEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - Identity__Url=http://identity_api_${tjobname}
    ports:
      - "${retorchporte}:80"
    networks:
      - jenkins_network

  webstatus:
    container_name: webstatus_${tjobname}
    image: ${REGISTRY:-eshop}/webstatus:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebStatus/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - HealthChecksUI__HealthChecks__0__Name=WebMVC HTTP Check
      - HealthChecksUI__HealthChecks__0__Uri=http://webmvc_${tjobname}/hc
      - HealthChecksUI__HealthChecks__1__Name=WebSPA HTTP Check
      - HealthChecksUI__HealthChecks__1__Uri=http://webspa_${tjobname}/hc
      - HealthChecksUI__HealthChecks__2__Name=Web Shopping Aggregator GW HTTP Check
      - HealthChecksUI__HealthChecks__2__Uri=http://webshoppingagg_${tjobname}/hc
      - HealthChecksUI__HealthChecks__3__Name=Mobile Shopping Aggregator HTTP Check
      - HealthChecksUI__HealthChecks__3__Uri=http://mobileshoppingagg_${tjobname}/hc
      - HealthChecksUI__HealthChecks__4__Name=Ordering HTTP Check
      - HealthChecksUI__HealthChecks__4__Uri=http://ordering_api_${tjobname}/hc
      - HealthChecksUI__HealthChecks__5__Name=Basket HTTP Check
      - HealthChecksUI__HealthChecks__5__Uri=http://basket_api_${tjobname}/hc
      - HealthChecksUI__HealthChecks__6__Name=Catalog HTTP Check
      - HealthChecksUI__HealthChecks__6__Uri=http://catalog_api_${tjobname}/hc
      - HealthChecksUI__HealthChecks__7__Name=Identity HTTP Check
      - HealthChecksUI__HealthChecks__7__Uri=http://identity_api_${tjobname}/hc
      - HealthChecksUI__HealthChecks__8__Name=Payments HTTP Check
      - HealthChecksUI__HealthChecks__8__Uri=http://payment_api_${tjobname}/hc
      - HealthChecksUI__HealthChecks__9__Name=Ordering SignalRHub HTTP Check
      - HealthChecksUI__HealthChecks__9__Uri=http://ordering_signalrhub_${tjobname}/hc
      - HealthChecksUI__HealthChecks__10__Name=Ordering HTTP Background Check
      - HealthChecksUI__HealthChecks__10__Uri=http://ordering_backgroundtasks_${tjobname}/hc
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    networks:
      - jenkins_network

  webspa:
    container_name: webspa_${tjobname}
    image: ${REGISTRY:-eshop}/webspa:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebSPA/Dockerfile
      args:
        NODE_IMAGE: ${NODE_IMAGE:-node:16-bullseye}
    depends_on:
      - webshoppingagg
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
      - PurchaseUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportd}
      - IdentityUrlHC=http://identity_api_${tjobname}/hc
      - SignalrHubUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportd}
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    ports:
      - "${retorchportb}:80"
    networks:
      - jenkins_network

  webmvc:
    container_name: webmvc_${tjobname}
    image: ${REGISTRY:-eshop}/webmvc:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebMVC/Dockerfile
    depends_on:
      - webshoppingagg
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - PurchaseUrl=http://webshoppingagg_${tjobname}
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
      - SignalrHubUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportd}
      - IdentityUrlHC=http://identity_api_${tjobname}/hc
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
    ports:
      - "${frontend_port}:80"
    networks:
      - jenkins_network

  webhooks-client:
    container_name: webhooks_client_${tjobname}
    image: ${REGISTRY:-eshop}/webhooks.client:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Web/WebhookClient/Dockerfile
    depends_on:
      - webhooks-api
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - Token=6168DB8D-DC58-4094-AF24-483278923590      # Webhooks are registered with this token (any value is valid) but the client won't check it
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportj}
      - CallBackUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:${retorchportc}
      - WebhooksUrl=http://webhooks_api_${tjobname}
      - SelfUrl=http://webhooks_client_${tjobname}/
    ports:
      - "${retorchportc}:80"
    networks:
      - jenkins_network

  webshoppingapigw:
    container_name: webshoppingapigw_${tjobname}
    image: envoyproxy/envoy:v1.11.1
    volumes:
      - ./tmp/${tjobname}/webshopping:/etc/envoy
    networks:
      - jenkins_network

volumes:
  eshop-sqldata:
    name: eshop-sqldata_${tjobname}
    external: false
  eshop-nosqldata:
    name: eshop-nosqldata_${tjobname}
    external: false
  eshop-basketdata:
    name: eshop-basketdata_${tjobname}
    external: false
networks:
  jenkins_network:
    external: true